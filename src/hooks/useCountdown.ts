'use client'

import { useState, useEffect } from 'react'

interface CountdownTime {
  days: number
  hours: number
  minutes: number
  seconds: number
  totalSeconds: number
}

// –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–∫—Ü–∏–∏ - 31 –¥–µ–Ω—å –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
const TARGET_DATE = new Date(Date.now() + 31 * 24 * 60 * 60 * 1000) // 31 –¥–µ–Ω—å

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
let globalCountdownValue: CountdownTime | null = null
let globalListeners: Set<(time: CountdownTime) => void> = new Set()

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
const calculateTimeLeft = (): CountdownTime => {
  const now = new Date()
  const difference = TARGET_DATE.getTime() - now.getTime()

  if (difference <= 0) {
    return { 
      days: 0, 
      hours: 0, 
      minutes: 0, 
      seconds: 0,
      totalSeconds: 0
    }
  }

  return {
    days: Math.floor(difference / (1000 * 60 * 60 * 24)),
    hours: Math.floor((difference / (1000 * 60 * 60)) % 24),
    minutes: Math.floor((difference / 1000 / 60) % 60),
    seconds: Math.floor((difference / 1000) % 60),
    totalSeconds: Math.floor(difference / 1000)
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤
let globalInterval: NodeJS.Timeout | null = null

const startGlobalTimer = () => {
  if (globalInterval) return

  const updateTime = () => {
    globalCountdownValue = calculateTimeLeft()
    globalListeners.forEach(listener => listener(globalCountdownValue!))
  }

  updateTime() // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  globalInterval = setInterval(updateTime, 1000)
  
  console.log('üéØ Global countdown timer started!')
}

const stopGlobalTimer = () => {
  if (globalInterval) {
    clearInterval(globalInterval)
    globalInterval = null
    console.log('üõë Global countdown timer stopped!')
  }
}

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export const useCountdown = () => {
  const [time, setTime] = useState<CountdownTime>(() => calculateTimeLeft())
  const [mounted, setMounted] = useState(false)

  useEffect(() => {
    setMounted(true)
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const listener = (newTime: CountdownTime) => {
      setTime(newTime)
    }
    
    globalListeners.add(listener)
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
    startGlobalTimer()
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (globalCountdownValue) {
      setTime(globalCountdownValue)
    }

    return () => {
      globalListeners.delete(listener)
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –Ω–µ—Ç —Å–ª—É—à–∞—Ç–µ–ª–µ–π
      if (globalListeners.size === 0) {
        stopGlobalTimer()
      }
    }
  }, [])

  return { time, mounted }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ DD:HH:MM:SS —Ñ–æ—Ä–º–∞—Ç (–¥–ª—è // Services countdown formatter2)
export const formatTimeForPromo = (time: CountdownTime): string => {
  if (time.totalSeconds <= 0) {
    return "00:00:00:00"
  }

  const dd = time.days.toString().padStart(2, "0")
  const hh = time.hours.toString().padStart(2, "0") 
  const mm = time.minutes.toString().padStart(2, "0")
  const ss = time.seconds.toString().padStart(2, "0")
  
  return `${dd}:${hh}:${mm}:${ss}`
}
